<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/02_Scripts/BirdMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/02_Scripts/BirdMover.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;namespace _02_Scripts&#10;{&#10;    public class BirdMover : MonoBehaviour&#10;    {&#10;        [Header(&quot;Movement Settings&quot;)]&#10;        [SerializeField] private float moveSpeed = 2f; // m/s&#10;        [SerializeField] private float wanderRadius = 5f;&#10;        [SerializeField] private float rotationSpeed = 180f; // degrees/s&#10;        &#10;        [Header(&quot;Idle Settings&quot;)]&#10;        [SerializeField] private Vector2 idleTimeRange = new Vector2(1f, 3f);&#10;        &#10;        [Header(&quot;Home Position&quot;)]&#10;        [SerializeField] private Transform homeOverride; // 인스펙터에서 지정 가능한 홈 위치&#10;        &#10;        // Private variables&#10;        private Vector3 _homePosition;&#10;        private Vector3 _targetPosition;&#10;        private bool _isMoving;&#10;        private float _idleTimer;&#10;        private float _currentIdleTime;&#10;        &#10;        void Start()&#10;        {&#10;            // 홈 위치 설정 - homeOverride가 있으면 그 위치를, 없으면 현재 위치를 홈으로 사용&#10;            _homePosition = homeOverride != null ? homeOverride.position : transform.position;&#10;            &#10;            // 첫 번째 목표 지점 설정&#10;            SetNewTarget();&#10;            &#10;            // 첫 번째 정지 시간 설정&#10;            SetNewIdleTime();&#10;        }&#10;        &#10;        void Update()&#10;        {&#10;            if (_isMoving)&#10;            {&#10;                MoveToTarget();&#10;            }&#10;            else&#10;            {&#10;                HandleIdleState();&#10;            }&#10;        }&#10;        &#10;        private void MoveToTarget()&#10;        {&#10;            Vector3 direction = (_targetPosition - transform.position).normalized;&#10;            Vector3 moveVector = direction * (moveSpeed * Time.deltaTime);&#10;            &#10;            // 이동&#10;            transform.Translate(moveVector, Space.World);&#10;            &#10;            // 회전 - 이동 방향을 향하도록&#10;            if (direction != Vector3.zero)&#10;            {&#10;                Quaternion targetRotation = Quaternion.LookRotation(direction);&#10;                transform.rotation = Quaternion.RotateTowards(&#10;                    transform.rotation,&#10;                    targetRotation,&#10;                    rotationSpeed * Time.deltaTime&#10;                );&#10;            }&#10;            &#10;            // 목표 지점에 도착했는지 확인 (0.1m 이내)&#10;            if (Vector3.Distance(transform.position, _targetPosition) &lt; 0.1f)&#10;            {&#10;                _isMoving = false;&#10;                _idleTimer = 0f;&#10;                SetNewIdleTime();&#10;            }&#10;        }&#10;        &#10;        private void HandleIdleState()&#10;        {&#10;            _idleTimer += Time.deltaTime;&#10;            &#10;            if (_idleTimer &gt;= _currentIdleTime)&#10;            {&#10;                SetNewTarget();&#10;                _isMoving = true;&#10;            }&#10;        }&#10;        &#10;        private void SetNewTarget()&#10;        {&#10;            // 홈 위치를 중심으로 wanderRadius 내에서 무작위 지점 선택&#10;            Vector2 randomCircle = Random.insideUnitCircle * wanderRadius;&#10;            _targetPosition = _homePosition + new Vector3(randomCircle.x, 0f, randomCircle.y);&#10;            &#10;            // Y축은 홈 위치와 동일하게 유지 (지면 높이 유지)&#10;            _targetPosition.y = _homePosition.y;&#10;        }&#10;        &#10;        private void SetNewIdleTime()&#10;        {&#10;            _currentIdleTime = Random.Range(idleTimeRange.x, idleTimeRange.y);&#10;        }&#10;        &#10;        // 디버그용 - 홈 위치와 배회 반경을 시각화&#10;        void OnDrawGizmosSelected()&#10;        {&#10;            Vector3 home = homeOverride != null ? homeOverride.position : transform.position;&#10;            &#10;            // 홈 위치 표시&#10;            Gizmos.color = Color.green;&#10;            Gizmos.DrawSphere(home, 0.2f);&#10;            &#10;            // 배회 반경 표시&#10;            Gizmos.color = Color.yellow;&#10;            Gizmos.DrawWireSphere(home, wanderRadius);&#10;            &#10;            // 현재 목표 지점 표시 (게임 실행 중일 때만)&#10;            if (Application.isPlaying)&#10;            {&#10;                Gizmos.color = Color.red;&#10;                Gizmos.DrawSphere(_targetPosition, 0.1f);&#10;                &#10;                // 현재 위치에서 목표까지의 선&#10;                Gizmos.color = Color.cyan;&#10;                Gizmos.DrawLine(transform.position, _targetPosition);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace _02_Scripts&#10;{&#10;    public class BirdMover : MonoBehaviour&#10;    {&#10;        [Header(&quot;Movement Settings&quot;)]&#10;        [SerializeField] private float moveSpeed = 2f; // m/s&#10;        [SerializeField] private float wanderRadius = 5f;&#10;        [SerializeField] private float rotationSpeed = 180f; // degrees/s&#10;        &#10;        [Header(&quot;Idle Settings&quot;)]&#10;        [SerializeField] private Vector2 idleTimeRange = new Vector2(1f, 3f);&#10;        &#10;        [Header(&quot;Home Position&quot;)]&#10;        [SerializeField] private Transform homeOverride; // 인스펙터에서 지정 가능한 홈 위치&#10;        &#10;        // Private variables&#10;        private Vector3 _homePosition;&#10;        private Vector3 _targetPosition;&#10;        private bool _isMoving;&#10;        private float _idleTimer;&#10;        private float _currentIdleTime;&#10;        &#10;        void Start()&#10;        {&#10;            // 홈 위치 설정 - homeOverride가 있으면 그 위치를, 없으면 현재 위치를 홈으로 사용&#10;            _homePosition = homeOverride != null ? homeOverride.position : transform.position;&#10;            &#10;            // 첫 번째 목표 지점 설정&#10;            SetNewTarget();&#10;            &#10;            // 첫 번째 정지 시간 설정&#10;            SetNewIdleTime();&#10;        }&#10;        &#10;        void Update()&#10;        {&#10;            if (_isMoving)&#10;            {&#10;                MoveToTarget();&#10;            }&#10;            else&#10;            {&#10;                HandleIdleState();&#10;            }&#10;        }&#10;        &#10;        private void MoveToTarget()&#10;        {&#10;            Vector3 direction = (_targetPosition - transform.position).normalized;&#10;            &#10;            // Y축 이동을 방지하기 위해 direction의 Y 성분을 0으로 설정&#10;            direction.y = 0;&#10;            direction = direction.normalized;&#10;            &#10;            Vector3 moveVector = direction * (moveSpeed * Time.deltaTime);&#10;            &#10;            // 이동 (Y축 변화 방지)&#10;            Vector3 newPosition = transform.position + moveVector;&#10;            newPosition.y = transform.position.y; // Y 위치 고정&#10;            transform.position = newPosition;&#10;            &#10;            // 회전 - 이동 방향을 향하도록 (Y축 회전만)&#10;            if (direction != Vector3.zero)&#10;            {&#10;                Quaternion targetRotation = Quaternion.LookRotation(direction);&#10;                transform.rotation = Quaternion.RotateTowards(&#10;                    transform.rotation,&#10;                    targetRotation,&#10;                    rotationSpeed * Time.deltaTime&#10;                );&#10;            }&#10;            &#10;            // 목표 지점에 도착했는지 확인 (0.1m 이내, Y축 제외)&#10;            Vector3 currentPosFlat = new Vector3(transform.position.x, 0, transform.position.z);&#10;            Vector3 targetPosFlat = new Vector3(_targetPosition.x, 0, _targetPosition.z);&#10;            if (Vector3.Distance(currentPosFlat, targetPosFlat) &lt; 0.1f)&#10;            {&#10;                _isMoving = false;&#10;                _idleTimer = 0f;&#10;                SetNewIdleTime();&#10;            }&#10;        }&#10;        &#10;        private void HandleIdleState()&#10;        {&#10;            _idleTimer += Time.deltaTime;&#10;            &#10;            if (_idleTimer &gt;= _currentIdleTime)&#10;            {&#10;                SetNewTarget();&#10;                _isMoving = true;&#10;            }&#10;        }&#10;        &#10;        private void SetNewTarget()&#10;        {&#10;            // 홈 위치를 중심으로 wanderRadius 내에서 무작위 지점 선택&#10;            Vector2 randomCircle = Random.insideUnitCircle * wanderRadius;&#10;            _targetPosition = _homePosition + new Vector3(randomCircle.x, 0f, randomCircle.y);&#10;            &#10;            // Y축은 현재 새의 Y 위치로 설정하여 수평 이동만 하도록 함&#10;            _targetPosition.y = transform.position.y;&#10;        }&#10;        &#10;        private void SetNewIdleTime()&#10;        {&#10;            _currentIdleTime = Random.Range(idleTimeRange.x, idleTimeRange.y);&#10;        }&#10;        &#10;        // 디버그용 - 홈 위치와 배회 반경을 시각화&#10;        void OnDrawGizmosSelected()&#10;        {&#10;            Vector3 home = homeOverride != null ? homeOverride.position : transform.position;&#10;            &#10;            // 홈 위치 표시&#10;            Gizmos.color = Color.green;&#10;            Gizmos.DrawSphere(home, 0.2f);&#10;            &#10;            // 배회 반경 표시&#10;            Gizmos.color = Color.yellow;&#10;            Gizmos.DrawWireSphere(home, wanderRadius);&#10;            &#10;            // 현재 목표 지점 표시 (게임 실행 중일 때만)&#10;            if (Application.isPlaying)&#10;            {&#10;                Gizmos.color = Color.red;&#10;                Gizmos.DrawSphere(_targetPosition, 0.1f);&#10;                &#10;                // 현재 위치에서 목표까지의 선&#10;                Gizmos.color = Color.cyan;&#10;                Gizmos.DrawLine(transform.position, _targetPosition);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>