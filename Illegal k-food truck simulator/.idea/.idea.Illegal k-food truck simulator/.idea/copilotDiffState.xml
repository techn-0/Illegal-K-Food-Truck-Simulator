<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/02_Scripts/Player/PlayerController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/02_Scripts/Player/PlayerController.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;&#10;namespace _02_Scripts&#10;{&#10;    /// &lt;summary&gt;&#10;    /// 플레이어 캐릭터의 이동과 기본 UI 인터랙션을 처리하는 컨트롤러&#10;    /// 카메라 기준 3D 이동, 인벤토리 UI 토글 기능 제공&#10;    /// &lt;/summary&gt;&#10;    [RequireComponent(typeof(CharacterController))]&#10;    public class PlayerController : MonoBehaviour&#10;    {&#10;        [SerializeField] float speed = 5f;&#10;        [SerializeField] Transform cameraTransform; // 카메라 Transform 참조&#10;        [SerializeField] InventoryView inventoryView; // 인벤토리 UI 참조&#10;    &#10;        CharacterController _cc;&#10;        Vector2 _moveInput; // Input System에서 받은 이동 입력값&#10;&#10;        /// &lt;summary&gt;&#10;        /// 초기화: 필수 컴포넌트 연결 및 카메라 자동 할당&#10;        /// &lt;/summary&gt;&#10;        void Awake()&#10;        {&#10;            _cc = GetComponent&lt;CharacterController&gt;();&#10;        &#10;            // 카메라 Transform이 설정되지 않았다면 Main Camera 자동 할당&#10;            if (cameraTransform == null)&#10;                cameraTransform = Camera.main?.transform;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Input System 콜백: 이동 입력 처리 (WASD, 조이스틱)&#10;        /// &lt;/summary&gt;&#10;        void OnMove(InputValue value) =&gt; _moveInput = value.Get&lt;Vector2&gt;();&#10;&#10;        void Update()&#10;        {&#10;            // 인벤토리 UI 토글 처리 (I키) 나중에 인풋시스템으로 변경하는게 좋을듯&#10;            if (Input.GetKeyDown(KeyCode.I))&#10;            {&#10;                if (inventoryView != null)&#10;                {&#10;                    inventoryView.gameObject.SetActive(!inventoryView.gameObject.activeSelf);&#10;                }&#10;            }&#10;&#10;            // 이동 처리를 위한 기본 검증&#10;            if (_cc == null || !_cc.enabled || !_cc.gameObject.activeInHierarchy) return;&#10;            if (cameraTransform == null) return;&#10;        &#10;            // 카메라 기준 방향 벡터 계산 (월드 좌표계)&#10;            Vector3 cameraForward = cameraTransform.forward;&#10;            Vector3 cameraRight = cameraTransform.right;&#10;        &#10;            // Y축 제거하여 수평면에서만 이동하도록 제한&#10;            cameraForward.y = 0;&#10;            cameraRight.y = 0;&#10;            cameraForward.Normalize();&#10;            cameraRight.Normalize();&#10;        &#10;            // 입력값을 카메라 기준 방향으로 변환&#10;            Vector3 dir = cameraRight * _moveInput.x + cameraForward * _moveInput.y;&#10;        &#10;            // 대각선 이동 시 속도 보정 (벡터 크기를 1로 제한)&#10;            if (dir.sqrMagnitude &gt; 1f)&#10;                dir = dir.normalized;&#10;            &#10;            // 실제 이동 처리&#10;            if (dir.sqrMagnitude &gt; 0)&#10;                _cc.Move(dir * (speed * Time.deltaTime));&#10;&#10;            // 기본 중력 처리 (땅에 붙어있지 않을 때)&#10;            if (!_cc.isGrounded) _cc.Move(Physics.gravity * Time.deltaTime);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;&#10;namespace _02_Scripts&#10;{&#10;    /// &lt;summary&gt;&#10;    /// 플레이어 캐릭터의 이동과 기본 UI 인터랙션을 처리하는 컨트롤러&#10;    /// 카메라 기준 3D 이동, 인벤토리 UI 토글 기능 제공&#10;    /// &lt;/summary&gt;&#10;    [RequireComponent(typeof(CharacterController))]&#10;    public class PlayerController : MonoBehaviour&#10;    {&#10;        [SerializeField] float speed = 5f;&#10;        [SerializeField] Transform cameraTransform; // 카메라 Transform 참조&#10;        [SerializeField] InventoryView inventoryView; // 인벤토리 UI 참조&#10;    &#10;        CharacterController _cc;&#10;        Vector2 _moveInput; // Input System에서 받은 이동 입력값&#10;&#10;        /// &lt;summary&gt;&#10;        /// 초기화: 필수 컴포넌트 연결 및 카메라 자동 할당&#10;        /// &lt;/summary&gt;&#10;        void Awake()&#10;        {&#10;            _cc = GetComponent&lt;CharacterController&gt;();&#10;        &#10;            // 카메라 Transform이 설정되지 않았다면 Main Camera 자동 할당&#10;            if (cameraTransform == null)&#10;                cameraTransform = Camera.main?.transform;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Input System 콜백: 이동 입력 처리 (WASD, 조이스틱)&#10;        /// &lt;/summary&gt;&#10;        void OnMove(InputValue value) =&gt; _moveInput = value.Get&lt;Vector2&gt;();&#10;&#10;        void Update()&#10;        {&#10;            // 인벤토리 UI 토글 처리 (I키) 나중에 인풋시스템으로 변경하는게 좋을듯&#10;            if (Input.GetKeyDown(KeyCode.I))&#10;            {&#10;                if (inventoryView != null)&#10;                {&#10;                    inventoryView.gameObject.SetActive(!inventoryView.gameObject.activeSelf);&#10;                }&#10;            }&#10;&#10;            // 이동 처리를 위한 기본 검증&#10;            if (_cc == null || !_cc.enabled || !_cc.gameObject.activeInHierarchy) return;&#10;            if (cameraTransform == null) return;&#10;        &#10;            // 카메라 기준 방향 벡터 계산 (월드 좌표계)&#10;            Vector3 cameraForward = cameraTransform.forward;&#10;            Vector3 cameraRight = cameraTransform.right;&#10;        &#10;            // Y축 제거하여 수평면에서만 이동하도록 제한&#10;            cameraForward.y = 0;&#10;            cameraRight.y = 0;&#10;            cameraForward.Normalize();&#10;            cameraRight.Normalize();&#10;        &#10;            // 입력값을 카메라 기준 방향으로 변환&#10;            Vector3 dir = cameraRight * _moveInput.x + cameraForward * _moveInput.y;&#10;        &#10;            // 대각선 이동 시 속도 보정 (벡터 크기를 1로 제한)&#10;            if (dir.sqrMagnitude &gt; 1f)&#10;                dir = dir.normalized;&#10;            &#10;            // 실제 이동 처리&#10;            if (dir.sqrMagnitude &gt; 0)&#10;            {&#10;                _cc.Move(dir * (speed * Time.deltaTime));&#10;&#10;                // 캐릭터가 이동 방향을 바라보도록 회전&#10;                Quaternion targetRotation = Quaternion.LookRotation(dir);&#10;                transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, Time.deltaTime * 10f);&#10;            }&#10;&#10;            // 기본 중력 처리 (땅에 붙어있지 않을 때)&#10;            if (!_cc.isGrounded) _cc.Move(Physics.gravity * Time.deltaTime);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>