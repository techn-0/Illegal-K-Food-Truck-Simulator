<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/02_Scripts/Inventory/Inventory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/02_Scripts/Inventory/Inventory.cs" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;/// &lt;summary&gt;&#10;/// 인벤토리 시스템을 관리하는 메인 클래스&#10;/// &lt;/summary&gt;&#10;public class Inventory : MonoBehaviour&#10;{&#10;    [SerializeField] private int capacity = 12; // 인벤토리 용량 (고정)&#10;    [SerializeField] private List&lt;InventorySlot&gt; slots; // 인벤토리 슬롯 목록&#10;&#10;    /// &lt;summary&gt;&#10;    /// 인벤토리 내용이 변경될 때 호출되는 이벤트&#10;    /// &lt;/summary&gt;&#10;    public Action OnChanged;&#10;&#10;    /// &lt;summary&gt;&#10;    /// 인벤토리 슬롯 목록 (읽기 전용)&#10;    /// &lt;/summary&gt;&#10;    public List&lt;InventorySlot&gt; Slots =&gt; slots;&#10;&#10;    /// &lt;summary&gt;&#10;    /// 인벤토리 용량&#10;    /// &lt;/summary&gt;&#10;    public int Capacity =&gt; capacity;&#10;&#10;    /// &lt;summary&gt;&#10;    /// 초기화&#10;    /// &lt;/summary&gt;&#10;    private void Awake()&#10;    {&#10;        InitializeSlots();&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 슬롯 초기화 - capacity 크기만큼 빈 슬롯 생성&#10;    /// &lt;/summary&gt;&#10;    private void InitializeSlots()&#10;    {&#10;        slots = new List&lt;InventorySlot&gt;(capacity);&#10;        for (int i = 0; i &lt; capacity; i++)&#10;        {&#10;            slots.Add(new InventorySlot());&#10;        }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 아이템을 인벤토리에 추가&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;item&quot;&gt;추가할 아이템&lt;/param&gt;&#10;    /// &lt;param name=&quot;amount&quot;&gt;추가할 수량&lt;/param&gt;&#10;    /// &lt;returns&gt;성공적으로 추가된 수량&lt;/returns&gt;&#10;    public int Add(ItemDefinition item, int amount)&#10;    {&#10;        if (item == null || amount &lt;= 0)&#10;            return 0;&#10;&#10;        int originalAmount = amount;&#10;        int addedAmount = 0;&#10;&#10;        // 1단계: 같은 아이템이 있는 슬롯에 스택 합치기&#10;        for (int i = 0; i &lt; slots.Count &amp;&amp; amount &gt; 0; i++)&#10;        {&#10;            InventorySlot slot = slots[i];&#10;            &#10;            if (slot.IsSameItem(item))&#10;            {&#10;                int availableSpace = slot.GetAvailableSpace();&#10;                int toAdd = Mathf.Min(amount, availableSpace);&#10;                &#10;                if (toAdd &gt; 0)&#10;                {&#10;                    slot.Count += toAdd;&#10;                    amount -= toAdd;&#10;                    addedAmount += toAdd;&#10;                }&#10;            }&#10;        }&#10;&#10;        // 2단계: 남은 수량을 빈 슬롯에 추가&#10;        for (int i = 0; i &lt; slots.Count &amp;&amp; amount &gt; 0; i++)&#10;        {&#10;            InventorySlot slot = slots[i];&#10;            &#10;            if (slot.IsEmpty)&#10;            {&#10;                int toAdd = Mathf.Min(amount, item.MaxStack);&#10;                slot.Item = item;&#10;                slot.Count = toAdd;&#10;                amount -= toAdd;&#10;                addedAmount += toAdd;&#10;            }&#10;        }&#10;&#10;        // 변경사항이 있으면 이벤트 호출&#10;        if (addedAmount &gt; 0)&#10;        {&#10;            OnChanged?.Invoke();&#10;        }&#10;&#10;        return addedAmount;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 특정 슬롯에서 아이템 제거&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;index&quot;&gt;슬롯 인덱스&lt;/param&gt;&#10;    /// &lt;param name=&quot;amount&quot;&gt;제거할 수량&lt;/param&gt;&#10;    /// &lt;returns&gt;실제로 제거된 수량&lt;/returns&gt;&#10;    public int RemoveAt(int index, int amount)&#10;    {&#10;        if (index &lt; 0 || index &gt;= slots.Count || amount &lt;= 0)&#10;            return 0;&#10;&#10;        InventorySlot slot = slots[index];&#10;        if (slot.IsEmpty)&#10;            return 0;&#10;&#10;        int removedAmount = Mathf.Min(amount, slot.Count);&#10;        slot.Count -= removedAmount;&#10;&#10;        // 수량이 0 이하가 되면 슬롯 비우기&#10;        if (slot.Count &lt;= 0)&#10;        {&#10;            slot.Clear();&#10;        }&#10;&#10;        // 변경사항이 있으면 이벤트 호출&#10;        if (removedAmount &gt; 0)&#10;        {&#10;            OnChanged?.Invoke();&#10;        }&#10;&#10;        return removedAmount;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 특정 재료 키를 가진 아이템들의 총 개수 계산&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;ingredientKey&quot;&gt;검색할 재료 키&lt;/param&gt;&#10;    /// &lt;returns&gt;해당 재료 키를 가진 아이템들의 총 개수&lt;/returns&gt;&#10;    public int CountByIngredientKey(string ingredientKey)&#10;    {&#10;        if (string.IsNullOrEmpty(ingredientKey))&#10;            return 0;&#10;&#10;        int totalCount = 0;&#10;        &#10;        foreach (InventorySlot slot in slots)&#10;        {&#10;            if (!slot.IsEmpty &amp;&amp; slot.Item.IngredientKey == ingredientKey)&#10;            {&#10;                totalCount += slot.Count;&#10;            }&#10;        }&#10;&#10;        return totalCount;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 특정 아이템의 총 개수 계산&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;item&quot;&gt;검색할 아이템&lt;/param&gt;&#10;    /// &lt;returns&gt;해당 아이템의 총 개수&lt;/returns&gt;&#10;    public int CountItem(ItemDefinition item)&#10;    {&#10;        if (item == null)&#10;            return 0;&#10;&#10;        int totalCount = 0;&#10;        &#10;        foreach (InventorySlot slot in slots)&#10;        {&#10;            if (slot.IsSameItem(item))&#10;            {&#10;                totalCount += slot.Count;&#10;            }&#10;        }&#10;&#10;        return totalCount;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 인벤토리가 가득 찼는지 확인&#10;    /// &lt;/summary&gt;&#10;    /// &lt;returns&gt;가득 찼으면 true&lt;/returns&gt;&#10;    public bool IsFull()&#10;    {&#10;        foreach (InventorySlot slot in slots)&#10;        {&#10;            if (slot.IsEmpty)&#10;                return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 인벤토리 전체 비우기&#10;    /// &lt;/summary&gt;&#10;    public void Clear()&#10;    {&#10;        foreach (InventorySlot slot in slots)&#10;        {&#10;            slot.Clear();&#10;        }&#10;        OnChanged?.Invoke();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>