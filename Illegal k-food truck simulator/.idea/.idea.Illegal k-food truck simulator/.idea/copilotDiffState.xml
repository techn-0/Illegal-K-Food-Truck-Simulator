<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/02_Scripts/Cooking/CookingUI.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/02_Scripts/Cooking/CookingUI.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;&#10;public class CookingUI : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private GameObject cookingPanel;&#10;    [SerializeField] private Transform recipeContainer;&#10;    [SerializeField] private GameObject recipeItemPrefab;&#10;    &#10;    [Header(&quot;Cooking Timer UI&quot;)]&#10;    [SerializeField] private GameObject cookingTimerPanel;&#10;    [SerializeField] private TextMeshProUGUI timerText;&#10;    [SerializeField] private Slider timerSlider;&#10;    [SerializeField] private TextMeshProUGUI cookingDishNameText;&#10;    &#10;    private CookingManager cookingManager;&#10;    private CookingTimer cookingTimer;&#10;    &#10;    void Awake()&#10;    {&#10;        cookingManager = CookingManager.Instance;&#10;    }&#10;    &#10;    void Start()&#10;    {&#10;        // 쿠킹 매니저 이벤트 구독&#10;        cookingManager.OnCookingStarted += OnCookingStarted;&#10;        cookingManager.OnCookingCompleted += OnCookingCompleted;&#10;        cookingManager.OnCookingFailed += OnCookingFailed;&#10;        &#10;        // 쿠킹 타이머 가져오기 및 이벤트 구독&#10;        cookingTimer = cookingManager.GetCookingTimer();&#10;        cookingTimer.OnTimerUpdated += OnTimerUpdated;&#10;        &#10;        // 초기 상태 설정&#10;        // cookingPanel.SetActive(false);&#10;        // cookingTimerPanel.SetActive(false);&#10;&#10;        // 레시피 목록 생성&#10;        CreateRecipeList();&#10;    }&#10;    &#10;    void OnDestroy()&#10;    {&#10;        if (cookingManager != null)&#10;        {&#10;            cookingManager.OnCookingStarted -= OnCookingStarted;&#10;            cookingManager.OnCookingCompleted -= OnCookingCompleted;&#10;            cookingManager.OnCookingFailed -= OnCookingFailed;&#10;        }&#10;        &#10;        if (cookingTimer != null)&#10;        {&#10;            cookingTimer.OnTimerUpdated -= OnTimerUpdated;&#10;        }&#10;    }&#10;    &#10;    private void CreateRecipeList()&#10;    {&#10;        var recipes = cookingManager.GetAvailableRecipes();&#10;        &#10;        foreach (var recipe in recipes)&#10;        {&#10;            GameObject recipeItem = Instantiate(recipeItemPrefab, recipeContainer);&#10;            RecipeItemUI recipeItemUI = recipeItem.GetComponent&lt;RecipeItemUI&gt;();&#10;        // 기존 레시피 아이템들 제거&#10;        foreach (Transform child in recipeContainer)&#10;        {&#10;            Destroy(child.gameObject);&#10;        }&#10;        &#10;            recipeItemUI.SetupRecipe(recipe);&#10;        }&#10;    }&#10;    &#10;    private void OnCookingStarted(RecipeDefinition recipe, float cookingTime)&#10;    {&#10;        cookingPanel.SetActive(false);&#10;        cookingTimerPanel.SetActive(true);&#10;        &#10;        cookingDishNameText.text = $&quot;{recipe.RecipeName} 조리 중...&quot;;&#10;        timerSlider.value = 0f; // 진행도는 0부터 시작&#10;    }&#10;    &#10;    private void OnCookingCompleted(RecipeDefinition recipe)&#10;    {&#10;        cookingTimerPanel.SetActive(false);&#10;        // 완성 메시지 표시 (선택사항)&#10;        Debug.Log($&quot;{recipe.RecipeName} 조리 완성!&quot;);&#10;    }&#10;    &#10;    private void OnCookingFailed(string message)&#10;    {&#10;        Debug.Log(message);&#10;        // 실패 메시지 UI 표시 (선택사항)&#10;    }&#10;    &#10;    private void OnTimerUpdated(float remainingTime, float progress)&#10;    {&#10;        // 타이머 UI 업데이트&#10;        timerSlider.value = progress;&#10;        timerText.text = $&quot;{Mathf.Ceil(remainingTime)}초&quot;;&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;&#10;public class CookingUI : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private GameObject cookingPanel;&#10;    [SerializeField] private Transform recipeContainer;&#10;    [SerializeField] private GameObject recipeItemPrefab;&#10;    &#10;    [Header(&quot;Cooking Timer UI&quot;)]&#10;    [SerializeField] private GameObject cookingTimerPanel;&#10;    [SerializeField] private TextMeshProUGUI timerText;&#10;    [SerializeField] private Slider timerSlider;&#10;    [SerializeField] private TextMeshProUGUI cookingDishNameText;&#10;    &#10;    private CookingManager cookingManager;&#10;    private CookingTimer cookingTimer;&#10;    &#10;    void Awake()&#10;    {&#10;        cookingManager = CookingManager.Instance;&#10;    }&#10;    &#10;    void Start()&#10;    {&#10;        // 쿠킹 매니저 이벤트 구독&#10;        cookingManager.OnCookingStarted += OnCookingStarted;&#10;        cookingManager.OnCookingCompleted += OnCookingCompleted;&#10;        cookingManager.OnCookingFailed += OnCookingFailed;&#10;        &#10;        // 쿠킹 타이머 가져오기 및 이벤트 구독&#10;        cookingTimer = cookingManager.GetCookingTimer();&#10;        cookingTimer.OnTimerUpdated += OnTimerUpdated;&#10;        &#10;        // 레시피 해금 이벤트 구독&#10;        RecipeUnlockManager.OnUnlockedRecipesChanged += OnUnlockedRecipesChanged;&#10;        &#10;        // 초기 상태 설정&#10;        // cookingPanel.SetActive(false);&#10;        // cookingTimerPanel.SetActive(false);&#10;&#10;        // 레시피 목록 생성&#10;        CreateRecipeList();&#10;    }&#10;    &#10;    void OnDestroy()&#10;    {&#10;        if (cookingManager != null)&#10;        {&#10;            cookingManager.OnCookingStarted -= OnCookingStarted;&#10;            cookingManager.OnCookingCompleted -= OnCookingCompleted;&#10;            cookingManager.OnCookingFailed -= OnCookingFailed;&#10;        }&#10;        &#10;        if (cookingTimer != null)&#10;        {&#10;            cookingTimer.OnTimerUpdated -= OnTimerUpdated;&#10;        }&#10;        &#10;        // 레시피 해금 이벤트 구독 해제&#10;        RecipeUnlockManager.OnUnlockedRecipesChanged -= OnUnlockedRecipesChanged;&#10;    }&#10;    &#10;    private void CreateRecipeList()&#10;    {&#10;        // 기존 레시피 아이템들 제거&#10;        foreach (Transform child in recipeContainer)&#10;        {&#10;            Destroy(child.gameObject);&#10;        }&#10;        &#10;        var recipes = cookingManager.GetAvailableRecipes();&#10;        &#10;        foreach (var recipe in recipes)&#10;        {&#10;            GameObject recipeItem = Instantiate(recipeItemPrefab, recipeContainer);&#10;            RecipeItemUI recipeItemUI = recipeItem.GetComponent&lt;RecipeItemUI&gt;();&#10;            recipeItemUI.SetupRecipe(recipe);&#10;        }&#10;    }&#10;    &#10;    private void OnCookingStarted(RecipeDefinition recipe, float cookingTime)&#10;    {&#10;        cookingPanel.SetActive(false);&#10;        cookingTimerPanel.SetActive(true);&#10;        &#10;        cookingDishNameText.text = $&quot;{recipe.RecipeName} 조리 중...&quot;;&#10;        timerSlider.value = 0f; // 진행도는 0부터 시작&#10;    }&#10;    &#10;    private void OnCookingCompleted(RecipeDefinition recipe)&#10;    {&#10;        cookingTimerPanel.SetActive(false);&#10;        // 완성 메시지 표시 (선택사항)&#10;        Debug.Log($&quot;{recipe.RecipeName} 조리 완성!&quot;);&#10;    }&#10;    &#10;    private void OnCookingFailed(string message)&#10;    {&#10;        Debug.Log(message);&#10;        // 실패 메시지 UI 표시 (선택사항)&#10;    }&#10;    &#10;    private void OnTimerUpdated(float remainingTime, float progress)&#10;    {&#10;        // 타이머 UI 업데이트&#10;        timerSlider.value = progress;&#10;        timerText.text = $&quot;{Mathf.Ceil(remainingTime)}초&quot;;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 해금된 레시피가 변경되었을 때 호출되는 이벤트 핸들러&#10;    /// &lt;/summary&gt;&#10;    private void OnUnlockedRecipesChanged()&#10;    {&#10;        CreateRecipeList();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/02_Scripts/Recipe/RecipeShopUI.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/02_Scripts/Recipe/RecipeShopUI.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;&#10;/// &lt;summary&gt;&#10;/// 레시피 상점 UI를 관리하는 클래스&#10;/// 단일 책임: 상점 UI 표시 및 구매 버튼 상호작용&#10;/// &lt;/summary&gt;&#10;public class RecipeShopUI : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private Transform recipeContainer; // 레시피 아이템들이 들어갈 컨테이너&#10;    [SerializeField] private GameObject recipeItemPrefab; // 레시피 아이템 UI 프리팹&#10;    [SerializeField] private TextMeshProUGUI playerMoneyText; // 플레이어 돈 표시 텍스트&#10;    &#10;    private RecipeShop recipeShop;&#10;    &#10;    private void Start()&#10;    {&#10;        // 상점 참조 찾기&#10;        var shopInteractor = FindObjectOfType&lt;RecipeShopInteractor&gt;();&#10;        if (shopInteractor != null)&#10;        {&#10;            recipeShop = shopInteractor.GetRecipeShop();&#10;        }&#10;        &#10;        // 돈 변경 이벤트 구독&#10;        PlayerMoneyManager.OnMoneyChanged += OnMoneyChanged;&#10;        &#10;        // 레시피 해금 이벤트 구독&#10;        RecipeUnlockManager.OnUnlockedRecipesChanged += RefreshShopItems;&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        // UI가 활성화될 때마다 상점 아이템 생성&#10;        CreateShopItems();&#10;        UpdateMoneyDisplay();&#10;    }&#10;    &#10;    private void OnDestroy()&#10;    {&#10;        // 이벤트 구독 해제&#10;        PlayerMoneyManager.OnMoneyChanged -= OnMoneyChanged;&#10;        RecipeUnlockManager.OnUnlockedRecipesChanged -= RefreshShopItems;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 상점 아이템들을 생성하여 UI에 표시&#10;    /// &lt;/summary&gt;&#10;    private void CreateShopItems()&#10;    {&#10;        if (recipeShop == null || recipeContainer == null || recipeItemPrefab == null) return;&#10;        &#10;        // 기존 아이템들 제거&#10;        ClearShopItems();&#10;        &#10;        // 상점 레시피들을 UI로 생성&#10;        var shopRecipes = recipeShop.GetShopRecipes();&#10;        foreach (var shopItem in shopRecipes)&#10;        {&#10;            if (shopItem.Recipe != null)&#10;            {&#10;                GameObject itemUI = Instantiate(recipeItemPrefab, recipeContainer);&#10;                var shopItemUI = itemUI.GetComponent&lt;RecipeShopItemUI&gt;();&#10;                if (shopItemUI != null)&#10;                {&#10;                    shopItemUI.Setup(shopItem, recipeShop);&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 기존 상점 아이템 UI들 제거&#10;    /// &lt;/summary&gt;&#10;    private void ClearShopItems()&#10;    {&#10;        if (recipeContainer == null) return;&#10;        &#10;        foreach (Transform child in recipeContainer)&#10;        {&#10;            Destroy(child.gameObject);&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 돈 표시 업데이트&#10;    /// &lt;/summary&gt;&#10;    private void UpdateMoneyDisplay()&#10;    {&#10;        if (playerMoneyText != null &amp;&amp; PlayerMoneyManager.Instance != null)&#10;        {&#10;            playerMoneyText.text = $&quot;골드: {PlayerMoneyManager.Instance.CurrentMoney}&quot;;&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 돈 변경 이벤트 핸들러&#10;    /// &lt;/summary&gt;&#10;    private void OnMoneyChanged(int newAmount)&#10;    {&#10;        UpdateMoneyDisplay();&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 상점 아이템 새로고침 (레시피 해금 상태 변경 시)&#10;    /// &lt;/summary&gt;&#10;    private void RefreshShopItems()&#10;    {&#10;        if (gameObject.activeInHierarchy)&#10;        {&#10;            CreateShopItems();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;&#10;/// &lt;summary&gt;&#10;/// 레시피 상점 UI를 관리하는 클래스&#10;/// 단일 책임: 상점 UI 표시 및 구매 버튼 상호작용&#10;/// &lt;/summary&gt;&#10;public class RecipeShopUI : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private Transform recipeContainer; // 레시피 아이템들이 들어갈 컨테이너&#10;    [SerializeField] private GameObject recipeItemPrefab; // 레시피 아이템 UI 프리팹&#10;    [SerializeField] private TextMeshProUGUI playerMoneyText; // 플레이어 돈 표시 텍스트&#10;    &#10;    private RecipeShop recipeShop;&#10;    &#10;    private void Start()&#10;    {&#10;        // 상점 참조 찾기&#10;        var shopInteractor = FindObjectOfType&lt;RecipeShopInteractor&gt;();&#10;        if (shopInteractor != null)&#10;        {&#10;            recipeShop = shopInteractor.GetRecipeShop();&#10;        }&#10;        &#10;        // 돈 변경 이벤트 구독&#10;        PlayerMoneyManager.OnMoneyChanged += OnMoneyChanged;&#10;        &#10;        // 레시피 해금 이벤트 구독&#10;        RecipeUnlockManager.OnUnlockedRecipesChanged += RefreshShopItems;&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        // 상점 참조가 없다면 다시 찾기&#10;        if (recipeShop == null)&#10;        {&#10;            var shopInteractor = FindObjectOfType&lt;RecipeShopInteractor&gt;();&#10;            if (shopInteractor != null)&#10;            {&#10;                recipeShop = shopInteractor.GetRecipeShop();&#10;            }&#10;        }&#10;        &#10;        // UI가 활성화될 때마다 상점 아이템 생성&#10;        CreateShopItems();&#10;        UpdateMoneyDisplay();&#10;    }&#10;    &#10;    private void OnDestroy()&#10;    {&#10;        // 이벤트 구독 해제&#10;        PlayerMoneyManager.OnMoneyChanged -= OnMoneyChanged;&#10;        RecipeUnlockManager.OnUnlockedRecipesChanged -= RefreshShopItems;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 상점 아이템들을 생성하여 UI에 표시&#10;    /// &lt;/summary&gt;&#10;    private void CreateShopItems()&#10;    {&#10;        if (recipeShop == null || recipeContainer == null || recipeItemPrefab == null) return;&#10;        &#10;        // 기존 아이템들 제거&#10;        ClearShopItems();&#10;        &#10;        // 상점 레시피들을 UI로 생성&#10;        var shopRecipes = recipeShop.GetShopRecipes();&#10;        foreach (var shopItem in shopRecipes)&#10;        {&#10;            if (shopItem.Recipe != null)&#10;            {&#10;                GameObject itemUI = Instantiate(recipeItemPrefab, recipeContainer);&#10;                var shopItemUI = itemUI.GetComponent&lt;RecipeShopItemUI&gt;();&#10;                if (shopItemUI != null)&#10;                {&#10;                    shopItemUI.Setup(shopItem, recipeShop);&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 기존 상점 아이템 UI들 제거&#10;    /// &lt;/summary&gt;&#10;    private void ClearShopItems()&#10;    {&#10;        if (recipeContainer == null) return;&#10;        &#10;        foreach (Transform child in recipeContainer)&#10;        {&#10;            Destroy(child.gameObject);&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 돈 표시 업데이트&#10;    /// &lt;/summary&gt;&#10;    private void UpdateMoneyDisplay()&#10;    {&#10;        if (playerMoneyText != null &amp;&amp; PlayerMoneyManager.Instance != null)&#10;        {&#10;            playerMoneyText.text = $&quot;골드: {PlayerMoneyManager.Instance.CurrentMoney}&quot;;&#10;        }&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 돈 변경 이벤트 핸들러&#10;    /// &lt;/summary&gt;&#10;    private void OnMoneyChanged(int newAmount)&#10;    {&#10;        UpdateMoneyDisplay();&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 상점 아이템 새로고침 (레시피 해금 상태 변경 시)&#10;    /// &lt;/summary&gt;&#10;    private void RefreshShopItems()&#10;    {&#10;        if (gameObject.activeInHierarchy)&#10;        {&#10;            CreateShopItems();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>